Given a string s, find the length of the longest substring without duplicate characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.



class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character,Integer> h=new HashMap<>();
        int left=0,right=0;
        int len=0,maxlen=0;
        while(right<s.length()){
            if(h.containsKey(s.charAt(right))){
                if(h.get(s.charAt(right))>=left){
                    left=h.get(s.charAt(right))+1;
                }
            }
            len=right-left+1;
            maxlen=Math.max(maxlen,len);
            h.put(s.charAt(right),right);
            right+=1;
        }
        return maxlen;
    }
}
